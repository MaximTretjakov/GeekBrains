"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание: длина списка не фиксирована.
Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
При этом скрипт завершается, сформированный список выводится на экран.
Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить
соответствующее сообщение. При этом работа скрипта не должна завершаться.
"""


class ListError:
    def __init__(self):
        self.my_list = []

    def my_input(self):
        while True:
            try:
                user_data = int(input('Введите значения.\n'))
                self.my_list.append(user_data)
                print(f'Текущий список - {self.my_list} \n ')
            except:
                print(f'Недопустимое значение - строка и булево')

                data = input(f'Попробовать еще раз? stop - для завершения ввода / yes - для продолжения.\n')
                if data == 'Yes':
                    print(lr.my_input())
                elif data == 'stop':
                    return f'Программа завершена\n'


if __name__ == '__main__':

    lr = ListError()
    print(lr.my_input())
